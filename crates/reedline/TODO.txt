Line editor

TODO:

* vi mode
* 'dw' => delete word. 'delete' first part, and 'word' second part
* Repeats '10dw' => 10x 'dw'
* history hinting
* Make idle animations configurable (and able to be disabled)
* Make more clear that keybindings are for emacs
* Undo (ctrl-z)
* Multiline support
* Document recent API additions
* Validation
* UX improvements
  * Autocompletion
  * Under status
  * Hinting
* History handle multiple instances. Could potentially create multiple history files based on the instance of reedline

DONE:

X Get crossterm working
X Line input
X Printing a prompt
X Raw input mode
X Backspace
X Exiting
X Arrow key input
X Left/right and inserting text
X Backspace from middle of buffer
X Deleting from middle of buffer
X Fixed the scroll-off-the-bottom issue
X Editing engine
  X Create the engine
  X Initial commands for the engine
  X Output commands from engine to the line editor
* UTF-8 support
  X Line buffer
  X Backspace/delete
  X Navigation
  X Unicode w/ joiner support for removal
X History
X Up/down history
X Support for persisting history file
X Home/end
X Refactor keypresses to flush at the end
X Ctrl-A, Ctrl-K, etc
X More Ctrl-??? key combinations
X "engine"?
X Command pattern
X Split off lib
X Split Engine into its isolated parts
  X History
  X Maybe cut buffer. Question: do we want to connect to the OS's clipboard?
  X History is persisted to disk.
X Make Prompt trait and make prompt configurable
X Support resize
  * We should detect the resize event, then start back at the beginning of where
    the prompt began, redraw the prompt and then redraw the user input up to now
X prefix-based history navigation
X Custom keybindings
X Handle fallible history setup
X Proper history file truncation when hitting history size limits
X Documention
  X README
  X Documenting of all public functions and structs and traits
    * At least some of the public functions are now documented
X Prompt indicator change when in vi insert
X Prompt changes async while idle
X Add more unit tests
X Syntax highlighting
  * Move syntax highlighting from ansi strings to styled buffer
  * color -> style (color, bold/italic/underline)
